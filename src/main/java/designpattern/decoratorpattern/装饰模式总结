12.6 装饰模式总结
装饰模式降低了系统的耦合度，可以动态增加或删除对象的职责，并使得需要装饰的具体构
件类和具体装饰类可以独立变化，以便增加新的具体构件类和具体装饰类。在软件开发中，
装饰模式应用较为广泛，例如在JavaIO中的输入流和输出流的设计、javax.swing包中一些图形
界面构件功能的增强等地方都运用了装饰模式。
1.主要优点
装饰模式的主要优点如下：
(1) 对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。
(2) 可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的
具体装饰类，从而实现不同的行为。
(3) 可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，
可以创造出很多不同行为的组合，得到功能更为强大的对象。
(4) 具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装
饰类，原有类库代码无须改变，符合“开闭原则”。
2.主要缺点
装饰模式的主要缺点如下：
(1) 使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接
的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多
的系统资源，在一定程序上影响程序的性能。
(2) 装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出
错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。
3.适用场景
在以下情况下可以考虑使用装饰模式：
(1) 在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。
(2) 当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装
饰模式。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每
一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因
为类已定义为不能被继承（如Java语言中的final类）。

（一）透明装饰模式
……
Component component,componentSB,componentBB; //全部使用抽象构件定义
component = new Window();
componentSB = new ScrollBarDecorator(component);
componentBB = new BlackBorderDecorator(componentSB);
componentBB.display();
……
使用抽象构件类型Component定义全部具体构件对象和具体装饰对象，客户端可以一致地使用
这些对象，因此符合透明装饰模式的要求。
透明装饰模式可以让客户端透明地使用装饰之前的对象和装饰之后的对象，无须关心它们的
区别，此外，还可以对一个已装饰过的对象进行多次装饰，得到更为复杂、功能更为强大的
对象。在实现透明装饰模式时，要求具体装饰类的operation()方法覆盖抽象装饰类的operation()
方法，除了调用原有对象的operation()外还需要调用新增的addedBehavior()方法来增加新行
为，
（二）半透明装饰模式
……
Document doc; //使用抽象构件类型定义
doc = new PurchaseRequest();
Approver newDoc; //使用具体装饰类型定义
newDoc = new Approver(doc);
……
半透明装饰模式可以给系统带来更多的灵活性，设计相对简单，使用起来也非常方便；但是
其最大的缺点在于不能实现对同一个对象的多次装饰，而且客户端需要有区别地对待装饰之
前的对象和装饰之后的对象。在实现半透明的装饰模式时，我们只需在具体装饰类中增加一
个独立的addedBehavior()方法来封装相应的业务处理，由于客户端使用具体装饰类型来定义装
饰后的对象，因此可以单独调用addedBehavior()方法来扩展系统功能。

练习
    Sunny软件公司欲开发了一个数据加密模块，可以对字符串进行加密。最简单的加密算法
    通过对字母进行移位来实现，同时还提供了稍复杂的逆向输出加密，还提供了更为高级
    的求模加密。用户先使用最简单的加密算法对字符串进行加密，如果觉得还不够可以对
    加密之后的结果使用其他加密算法进行二次加密，当然也可以进行第三次加密。试使用
    装饰模式设计该多重加密系统。